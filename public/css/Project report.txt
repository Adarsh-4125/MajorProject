14/07/25
Today we are doing form validations 
When we enter data we should enter valid data

added required in new.ejs for form validations

success and failure text use bootstrap valid and invalid class for each data needed to ensure 
invalid not to be enter

(utils-> wrapAsync.js and imported in app.js for error handling using wrapAsync and middleware)Error handling done using app.use for create route if some error 
it shows status and created wrapAsync classes for it.

Error handling using error.ejs
Great! ðŸŽ‰  
Downgrading to Express 4.x resolved the issue.  
If you have any more questions or need further help, feel free to ask!

Joi is used to validate the schema for server side.

Done Client side validation and server side validation by creating listingSchema using joi for validation 
and created function of validatelisting to throw error for wrong validations and this function is updated in
create route and update route.

15/07/25
Today Creating the New ModeL: Reviews
In which we will have 
1. Comment
2. Rating
3. createdAt - Date and Time
For one listing we have many reviews
In our listingSchema we have added review as another schema saved their ids

Now Create Reviews form for to enter reviews of users

Submitting the Review form 
POST /listing/:id/reviews to add review for a particular listing
Client side-validation is done and now we have to do server-side validation
Server side-validation is done by using Joi in which created schema for our validations
and created function validatereview and added in post route of review

Reviews are shown using populate keyword in get show route 
Styling is done for the reviews using card bootStrap and divide them rows and columns

Deleting the Reviews

To delete the Reviews we have used app.delete in which we have passed listing id
and review id and $pull method (MongoDB) which finds the review and delete the review

On deleting the listing we should able to delete the reviews of particular 
listing for that we have used mongoose post method in listing.js by which on
deleting particular listing we can delete the reviews present in the listing 
of that.(it is middleware method)

Exploring Express Router usage 
const router = express.Router()
to import in server app.use('/users', users)

Restructuring the app.js using Express Router
In this we have restructured our app.js by using routes
we have created file routes and in that created listing.js for 
to breakdown complexity of the code and imported/required necessary files
in the listing.js and our page is running good and now we have structured our reviews
post and delete routes in the routes/review.js and running fine
but on adding review it is not adding due to can't find id

These is solved by using and set to mergeParams:true in our expressRouter

HTTP cookies - small blocks of data created by web server
Cookie Parser - middleware it is npm package used for access cookies 
in all routes

Signed Cookies are used to not to tamper of our cookies

16/06/25
State
Stateful Protocol : Stateful Protocol require server to save the status and 
session information.
eg-ftp-file transfer Protocol

Stateless Protocol: does not require server to retain the server information or session inf
eg-http

middlewares
Express Sessions: An attempt to make our session Stateful(Save the session information)
eg: user-add items to cart (client-server) uses temporary Storage.

npm package Connect-flash: The flash is a specila rea of the session used for storing messages.
messages are written to flash and cleared after being displayed to user.
session are necessary

Implementing Sessions in project: 
Implemented flash messages of success and error in flash.ejs on deleting the listing,creating and updating using express-session and
connect-flash which helped to create success message on these and similarly Implemented
for reviews post and deletion

Next We are doing Authentication and Authorization
storing passwords
We never store the passwords as it is. We store their hashed form.
Hashing - for every input, there is a fixed output
There are one-way functions, we can't get input from output
Fora different input, there is a different output but of same length
Small Changes eg; SHA256,bcrypt hash generators

Salting - to secure our password adding string of 32 or more char

Passport library use to Authentication installed npm package passport,passort local and mongooose.

models file created user.js and created schema for signup
pbkdf2 hashing algorithm is used in the passport package ,it is useful for create salting and hashed password

Creating GET/signup-to get form and POST/signup-to post user information to get signup form we have user folder in
that we created signup.ejs file and make the form with bootStrap validation and
rendered in the user.js of routes to show on our page

Nxt we store user information after signup passport mongoose helps us to store the user's information
we have used try and catch for signup to error handling

Nxt we are doing login user and creating get/login ang post/login 

Go through the passport docs for better understanding 

Authentication: to add new listing we have ensured that user is login ,if not we make user to login to 
add new listing using passport inbuilt function req.isAuthentivated()
We have created middleware function (isLoggedIn) and used in our create route,edit route,update route,
delete route the user must be logged in to change the listings.

Nxt we are doing logout using passport on req on /logout user will be logout
Similarly we are using inbuilt passport function for login on signup using req.login and
for logout-req.logout(read the passport docs)

We have added owner in our listing Schema and reintialized our database with a owner for all 
listings and showed owner for all listings by rendering it in show.ejs
Nxt we are going to give Authorization for only owners of listing to delete or edit.

We are successfuly hided the buttons for users who are not owners to not change anything
using currentUser._id equals listing.owner._id

We have successfully created Authorization for listings 
Nxt we have done Authorization for reviews also successfully and we are
using populate object to require reviews and author of particular listing

How to Write code{
    MVC: models-mongodb,view-frontene/render,controllers-functionality
    In resume we can add MVC framework
}

So today we have done the MVC again broke down the code to smaller pieces 
created file controles in which we have placed our functionality of listings,
reviews and users 

Nxt for more compatible of our code we have implemented the router.route which
gives for same https links we can combine all our put,post,get and delete

For ratings to show stars we have used github starability inbuilt code and
implemented in our project and successfully rendered also

Nxt Important we are doing Image Upload
Problems of Image Uploading in mongodb
1.Send files and Size limit
We make form capable of sending files and we are using third party service
like AWS,Azure and google cloud.- to save files and it sends URL/link
and save this link in mongodb.

We have set in new.ejs in our form enctype="multipart/form-data"
To handle multi-form data we are using (multer) called npm middleware and 
it will only handle multi-form data.

For image uploading we have downloaded the npm package cloudinary and multer-storage-cloudinary and nxt
form(file upload) -> backend -> cloud -> URL/link -> mongodb
successfully setup the to upload image file
1. We have have changed schema of listing in image added url and filename
2. reintialized the data and rendered the listing.
3.to show image we have changed listing.image to listing.image.url 
4.In our backend we have saved our url and filename from req.path and assigned this values
to newlisting.image for createnewlisting and
5.for edit listing we make sure if user want to change to image then only we have changed image or changed nothing about image.
6.successfully updated the createnewlisting and upadatelisting

Nxt we are adding mapping feature for our using mapbox
Mapbox GL JS is a client-side JavaScript library for building web maps and web applications 
with Mapbox's modern mapping technology. You can use Mapbox GL JS to display Mapbox maps 
in a web browser or client, add user interactivity, and customize the map experience in your application.

We can't access map api key or other keys in the publi folder, so we
have accessed it in our show.ejs file at first and then rendered map.js at
last which led to show map on our page.

Nxt - GeoCoding is which converts location to coordinates or vice versa.
We have installed npm package of mapbox to require geocoding in our code and 
to access

We can create category in our schema and helps us to search - Homework
category{
    type: string,
    enum: ['mountains','rooms']
}
styling: to decrease size we can use media query/bootStrap collapsable
Search functionality - we have to implement-Implemented Search functionality by
using mongodb queries used $regex and $i method to find user queries in controller listings
defined searchListing and written query and founded results rendered on page.
We can add farmhouses of each state, for example of warangal's farm houses and other farm houses 
So, it will be unique and it will not seen as copy.

Basically We have added functioning for the icons of our page for that we divide:
1.Added Schema category in our listingSchema,
2.Then we have added Joi schema validation,
3.Added form for category.
4.Taken input from user to check if they are working or not, for now they are working
5.In controllers to filter listing based on icon we have created function filterListings and 
then it is routed in our routers/listing.js and successfully Implemented functionality.

Implemented small Personalized recommendations functionality in project to implement these
1.In userSchema added new attributes -> recentViews,recentCategories array so that it 
tracks user information and give recommendations according to it.
2.Implemented middleware trackView function for tracking and then first added in
controllers but delted later to not track it doubly.
3.Created recommendations.ejs files to show recommendations on user usage.

For icons tried to implement to slide horizontally but there is some issue used 
glider bootStrap.

Trying to upload multiple images of listing I have made array of images and edited controllers of
upadatelisting and createListing in which I am trying to upload upto 3 images
Nxt we have to do changes in show.ejs and edit.ejs for rendering and editing multiple images 
we will do this tommorow after test.
successfully we can upload upto three images of listings and now we have to do some styling
for that and improve the review showing and let focus on that.
Done styling of the images on the show.ejs we have done great job let appreciate myself.
Done styling of the map also and today night after 9 we have to change the name of website and if we
have we will implement payment
Dayaftertommorow we have to change the wanderlust name to the other and we will recommit the code in github.

Nxt we have also completed sql project 50% and remaining 50% is there and we will complete upto tommorow.
Now start operating systems.
      <div class="col-md-6 ms-3">
        <!-- <div id="map" class="map"></div> -->
         <% listing.image.forEach(img => { %>
          <img src="<%= img.url %>" alt="listing image" class="img-fluid mb-2 card-img-top mb-3" alt="<%= listing.title %>" />
          <% }) %>
      </div>

Today created mongoose model for booking where I have included listing,user,checkin,checkout,totalPrice,guests
and status and createdat for testing implemented small controller to render bookingform and done client side validation for form